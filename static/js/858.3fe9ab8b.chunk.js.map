{"version":3,"file":"static/js/858.3fe9ab8b.chunk.js","mappings":"wNAqDA,UA9CqB,WACnB,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAYC,EAAAA,EAAAA,IAAU,IAAtBD,QACN,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAASO,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAoBA,OAlBEC,EAAAA,EAAAA,YAAU,WACRD,EAAUF,EAAAA,EAAAA,UACTI,EAAAA,EAAAA,IAAqBR,GACrBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAAb,IACbF,MAAK,SAAAX,GACJC,EAAWD,GACXQ,EAAUF,EAAAA,EAAAA,UACNN,EAAQc,OAAS,IACnBN,EAAUF,EAAAA,EAAAA,UACVS,MAAO,+BAEV,IACAC,OAAM,SAAAZ,GACLC,EAASD,EAAMa,SACfT,EAAUF,EAAAA,EAAAA,SACX,GACJ,GAAE,CAACJ,IAEAK,IAAWD,EAAAA,EAAAA,SACN,SAAC,IAAD,CAAQY,OAAQC,EAAAA,KAIrBZ,IAAWD,EAAAA,EAAAA,UACRF,EAAMa,QAGTV,IAAWD,EAAAA,EAAAA,UAEX,eAAIc,UAAWC,EAAAA,EAAAA,UAAf,SACGrB,EAAQsB,KAAI,SAAAC,GAAM,OACjB,gBAAoBH,UAAWC,EAAAA,EAAAA,UAA/B,WACE,qCAAaE,EAAOC,WACpB,qCAAaD,EAAOE,aAFbF,EAAOG,GADC,WAHzB,EAYD,C,uGCpDD,IAAMC,EAAW,+BACXC,EAAU,mCACVC,EAAe,iC,mKCARC,EAAqB,SAAAlB,GAChC,GAAIA,EAASmB,GACX,OAAOnB,EAASoB,OAGlB,MADAC,QAAQ7B,MAAM,oBAAqBQ,EAASL,QACtC,IAAI2B,MAAM,kCACjB,EACD,SAASC,EAAeC,GACtB,OAAOC,MAAM,GAAD,OACPV,EAAAA,GADO,qCAC8BC,EAAAA,GAD9B,gCAC6DQ,EAD7D,yBAEVzB,KAAKmB,EACR,CAED,SAASQ,EAAkBC,EAAQH,GACjC,OAAOC,MAAM,GAAD,OACPV,EAAAA,GADO,iCAC0BC,EAAAA,GAD1B,gCACyDQ,EADzD,sCAC2FG,IACrG5B,KAAKmB,EACR,CACD,SAASU,EAAqBtC,GAC5B,OAAOmC,MAAM,GAAD,OACPV,EAAAA,GADO,kBACWzB,EADX,oBAC8B0B,EAAAA,GAD9B,oBAEVjB,KAAKmB,EACR,CACD,SAASW,EAAqBvC,GAC5B,OAAOmC,MAAM,GAAD,OACPV,EAAAA,GADO,kBACWzB,EADX,4BACsC0B,EAAAA,GADtC,oBAEVjB,KAAKmB,EACR,CACD,SAASpB,EAAqBR,GAC5B,OAAOmC,MAAM,GAAD,OACPV,EAAAA,GADO,kBACWzB,EADX,4BACsC0B,EAAAA,GADtC,oBAEVjB,KAAKmB,EACR,C,sDClCM,IAAMxB,EAAgB,CACzBoC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W,oBCHd,KAAgB,UAAY,6BAA6B,UAAY,6B","sources":["components/MoviesDetails/MovieReviews.jsx","components/services/ApiBaseUrl.jsx","components/services/ApiServices.jsx","components/services/loadingStatus.jsx","webpack://react-homework-template/./src/components/MoviesDetails/MovieCast.module.css?6345"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesByReviews } from 'components/services/ApiServices';\nimport { Loader } from 'components/Loader/Loader';\nimport { loadingStatus } from 'components/services/loadingStatus';\nimport styles from './MovieCast.module.css'\n\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  let { movieId } = useParams('');\n  const [error, setError] = useState('');\n  const [status, setStatus] = useState(loadingStatus.IDLE);\n\n    useEffect(() => {\n      setStatus(loadingStatus.PENDING);\n       fetchMoviesByReviews(movieId)\n      .then(response => response.results)\n      .then(reviews => {\n        setReviews(reviews);\n        setStatus(loadingStatus.RESOLVED);\n        if (reviews.length < 1) {\n          setStatus(loadingStatus.REJECTED);\n          alert ('There are no reviews yet...')\n        }\n      })\n      .catch(error => {\n        setError(error.message);\n        setStatus(loadingStatus.REJECTED);\n      });\n  }, [movieId]);\n  \n  if (status === loadingStatus.PENDING) {\n    return <Loader loader={Loader} />;\n  }\n \n\n  if (status === loadingStatus.REJECTED) {\n    <h2>{error.message}</h2>;\n  }\n\n  if (status === loadingStatus.RESOLVED) {\n    return (\n      <ul className={styles.CastsList}>\n        {reviews.map(review => (\n          <li key={review.id} className={styles.CastsItem}>\n            <h2>author: {review.author}</h2>\n            <p>content: {review.content}</p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n};\nexport default MovieReviews","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"4bceebe1d1f9bc99c966449bdeaecb86\";\nconst BASE_IMG_URL = \"https://image.tmdb.org/t/p/w300\";\n\nexport { BASE_URL, API_KEY, BASE_IMG_URL };\n\n\n//https://api.themoviedb.org/3/movie/{movie_id}?api_key=4bceebe1d1f9bc99c966449bdeaecb86&language=en-US\n\n//https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=4bceebe1d1f9bc99c966449bdeaecb86&language=en-US&page=1\n\n//","import { BASE_URL, API_KEY } from './ApiBaseUrl';\n\nexport const handleResponseLink = response => {\n  if (response.ok) {\n    return response.json();\n  }\n  console.error('server response: ', response.status);\n  throw new Error('Sorry, something went wrong ...');\n};\nfunction fetchMoviesDay(page) {\n  return fetch(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false`\n  ).then(handleResponseLink);\n}\n\nfunction fetchMoviesByName(movies, page) {\n  return fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${movies}`\n  ).then(handleResponseLink);\n}\nfunction fetchMoviesByDetails(movieId) {\n  return fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  ).then(handleResponseLink);\n}\nfunction fetchMoviesByCredits(movieId) {\n  return fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  ).then(handleResponseLink);\n}\nfunction fetchMoviesByReviews(movieId) {\n  return fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  ).then(handleResponseLink);\n}\n\nexport {\n  fetchMoviesByName,\n  fetchMoviesDay,\n  fetchMoviesByDetails,\n  fetchMoviesByCredits,\n  fetchMoviesByReviews,\n};\n","export const loadingStatus = {\n    IDLE: \"idle\",\n    PENDING: \"pending\",\n    RESOLVED: \"resolved\",\n    REJECTED: \"rejected\",\n  };\n  ","// extracted by mini-css-extract-plugin\nexport default {\"CastsList\":\"MovieCast_CastsList__f6fQV\",\"CastsItem\":\"MovieCast_CastsItem__9qRim\"};"],"names":["useState","reviews","setReviews","movieId","useParams","error","setError","loadingStatus","status","setStatus","useEffect","fetchMoviesByReviews","then","response","results","length","alert","catch","message","loader","Loader","className","styles","map","review","author","content","id","BASE_URL","API_KEY","BASE_IMG_URL","handleResponseLink","ok","json","console","Error","fetchMoviesDay","page","fetch","fetchMoviesByName","movies","fetchMoviesByDetails","fetchMoviesByCredits","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}